apply plugin: 'c'
apply plugin: 'java'

model {
    platforms {
        osx_x86 {
            architecture "x86"
            operatingSystem "osx"
        }
        osx_x86_64 {
            architecture "x86_64"
            operatingSystem "osx"
        }
        linux_x86 {
            architecture "x86"
            operatingSystem "linux"
        }
        linux_x86_64 {
            architecture "x86_64"
            operatingSystem "linux"
        }
        linux_amd64 {
            architecture "amd64"
            operatingSystem "linux"
        }
        windows_x86 {
            architecture "x86"
            operatingSystem "windows"
        }
        windows_x86_64 {
            architecture "x86_64"
            operatingSystem "windows"
        }
        windows_amd64 {
            architecture "amd64"
            operatingSystem "windows"
        }
    }

    toolChains {
        visualCpp(VisualCpp)
        gcc(Gcc)
        clang(Clang)
    }

    repositories {
        libs(PrebuiltLibraries) {
            libcrypto {
                headers.srcDir "vendor/couchbase-lite-libcrypto/libs/include"
                binaries.withType(StaticLibraryBinary) {
                    def platformName = targetPlatform.name
                    def os = targetPlatform.operatingSystem;
                    def osName = os.name
                    def arch = targetPlatform.architecture.name.replaceAll("-", "_")
                    if (platformName == "windows_amd64" || platformName == "linux_amd64") {
                        arch = "amd64"
                    }
                    def libName = os.windows ? "libeay32.lib" : "libcrypto.a"
                    def libPath = ""
                    if (osName == "osx") {
                        // Using the universal library:
                        libPath = "vendor/couchbase-lite-libcrypto/libs/${osName}/${libName}"
                    } else {
                        libPath = "vendor/couchbase-lite-libcrypto/libs/${osName}/${arch}/${libName}"
                    }
                    staticLibraryFile = file(libPath)
                }
            }
        }
    }

    components {
        sqlcipher(NativeLibrarySpec) {
            targetPlatform "osx_x86"
            targetPlatform "osx_x86_64"
            targetPlatform "linux_x86"
            targetPlatform "linux_x86_64"
            targetPlatform "linux_amd64"
            targetPlatform "windows_x86"
            targetPlatform "windows_x86_64"
            targetPlatform "windows_amd64"
            sources {
                c {
                    source {
                        srcDir "src/c"
                    }
                    exportedHeaders {
                        srcDir "src/headers"
                    }
                    lib library: 'libcrypto', linkage: 'static'
                }
            }
            binaries.all {
                def platformName = targetPlatform.name
                def arch = targetPlatform.architecture.name.replaceAll("-", "_")
                if (platformName == "windows_amd64" || platformName == "linux_amd64") {
                    arch = "amd64"
                }

                cCompiler.args "-DSQLITE_ENABLE_COLUMN_METADATA"
                cCompiler.args "-DSQLITE_ENABLE_FTS3"
                cCompiler.args "-DSQLITE_ENABLE_FTS3_PARENTHESIS"
                cCompiler.args "-DSQLITE_ENABLE_FTS4"
                cCompiler.args "-DSQLITE_ENABLE_FTS4_UNICODE61"
				cCompiler.args "-DSQLITE_ENABLE_FTS5"
                cCompiler.args "-DSQLITE_ENABLE_RTREE"
                cCompiler.args "-DSQLITE_HAS_CODEC"
                cCompiler.args "-DSQLITE_POWERSAFE_OVERWRITE=1"
                cCompiler.args "-DSQLITE_THREADSAFE=2"
                cCompiler.args "-DSQLITE_TEMP_STORE=2"
				
                cCompiler.args "-fPIC"

                if (toolChain in Gcc) {
                    cCompiler.args "-ffunction-sections", "-fdata-sections", "-fomit-frame-pointer"
                    linker.args "-Wl,--no-undefined"
                    linker.args "-lpthread", "-ldl" 
                }
                
                if (toolChain in VisualCpp) {
                    cCompiler.args "-I" + VS_2015_INCLUDE_DIR
                    if(targetPlatform.architecture.name == "x86") {
                        linker.args "/LIBPATH:" + VS_2015_LIB_DIR + "/x86"
                    }
                    else /*if(targetPlatform.architecture.name == "x86-64" || targetPlatform.architecture.name == "amd64")*/ {
                        linker.args "/LIBPATH:" + VS_2015_LIB_DIR + "/x64"
                    }
                    linker.args "Advapi32.lib", "Gdi32.lib", "User32.lib", "/DEF:src\\def\\sqlite3.def"
                }
            }

            binaries.withType(SharedLibraryBinary) {
                //if (targetPlatform.operatingSystem.linux) {
                //    linker.args "-Wl,-whole-archive,vendor/couchbase-lite-libcrypto/libs/linux/${arch}/libcrypto.a"
                //        linker.args "-Wl,-no-whole-archive"
                //}
            }
        }
    }
}

jar.baseName = "sqlcipher"

binaries.withType(SharedLibraryBinary) { binary ->
    if (!buildable) {
        return
    }

    def builderTask = binary.tasks
    def platformName = targetPlatform.name
    def os = targetPlatform.operatingSystem.name
    def arch = targetPlatform.architecture.name.replaceAll("-", "_")
    if (platformName == "windows_amd64" || platformName == "linux_amd64") {
        arch = "amd64"
    }

    jar.into("libs/${os}/${arch}") {
        from builderTask.outputFile
    }

    jar.dependsOn builderTask
}

binaries.withType(StaticLibraryBinary) { binary ->
    if (!buildable) {
        return
    }

    def builderTask = binary.tasks
    def platformName = targetPlatform.name
    def os = targetPlatform.operatingSystem.name
    def arch = targetPlatform.architecture.name.replaceAll("-", "_")
    if (platformName == "windows_amd64" || platformName == "linux_amd64") {
        arch = "amd64"
    }

    jar.into("libs/${os}/${arch}") {
        from builderTask.outputFile
    }

    jar.dependsOn builderTask
}
